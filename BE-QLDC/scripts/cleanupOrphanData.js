/**
 * Script ƒë·ªÉ d·ªçn d·∫πp d·ªØ li·ªáu orphan (d·ªØ li·ªáu kh√¥ng c√≤n reference h·ª£p l·ªá)
 * v√† ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu
 */

const mongoose = require("mongoose");
const config = require("../configs");
const { Citizen, Household } = require("../models");

async function cleanupOrphanData() {
  try {
    console.log("üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† d·ªçn d·∫πp d·ªØ li·ªáu...\n");

    // 1. T√¨m citizens c√≥ household kh√¥ng t·ªìn t·∫°i
    console.log("üìã Ki·ªÉm tra citizens c√≥ household kh√¥ng h·ª£p l·ªá...");
    const allCitizens = await Citizen.find({
      household: { $exists: true, $ne: null },
    });
    let orphanCitizens = 0;

    for (const citizen of allCitizens) {
      const household = await Household.findById(citizen.household);
      if (!household) {
        console.log(
          `‚ö†Ô∏è  Citizen ${citizen.code || citizen._id} (${
            citizen.fullName
          }) c√≥ household kh√¥ng t·ªìn t·∫°i`
        );
        await Citizen.findByIdAndUpdate(citizen._id, {
          $unset: { household: "" },
          relationshipToHead: null,
          isHead: false,
        });
        orphanCitizens++;
      }
    }

    if (orphanCitizens > 0) {
      console.log(
        `‚úÖ ƒê√£ d·ªçn d·∫πp ${orphanCitizens} citizens c√≥ household kh√¥ng h·ª£p l·ªá\n`
      );
    } else {
      console.log(`‚úÖ Kh√¥ng c√≥ citizens c√≥ household kh√¥ng h·ª£p l·ªá\n`);
    }

    // 2. T√¨m households c√≥ head kh√¥ng t·ªìn t·∫°i
    console.log("üìã Ki·ªÉm tra households c√≥ head kh√¥ng h·ª£p l·ªá...");
    const allHouseholds = await Household.find();
    let orphanHouseholds = 0;

    for (const household of allHouseholds) {
      const head = await Citizen.findById(household.head);
      if (!head) {
        console.log(
          `‚ö†Ô∏è  Household ${household.code} c√≥ head kh√¥ng t·ªìn t·∫°i - C·∫¶N X√ìA TH·ª¶ C√îNG`
        );
        orphanHouseholds++;
        // Kh√¥ng t·ª± ƒë·ªông x√≥a household, ƒë·ªÉ admin quy·∫øt ƒë·ªãnh
      }
    }

    if (orphanHouseholds > 0) {
      console.log(
        `‚ö†Ô∏è  T√¨m th·∫•y ${orphanHouseholds} households c√≥ head kh√¥ng h·ª£p l·ªá - C·∫ßn x·ª≠ l√Ω th·ªß c√¥ng\n`
      );
    } else {
      console.log(`‚úÖ T·∫•t c·∫£ households ƒë·ªÅu c√≥ head h·ª£p l·ªá\n`);
    }

    // 3. ƒê·ªìng b·ªô members c·ªßa households
    console.log("üìã ƒê·ªìng b·ªô members c·ªßa households...");
    let syncedHouseholds = 0;

    for (const household of allHouseholds) {
      const actualMembers = await Citizen.find({ household: household._id });
      const actualMemberIds = actualMembers.map((m) => m._id.toString());
      const currentMemberIds = (household.members || []).map((m) =>
        m.toString()
      );

      // So s√°nh v√† c·∫≠p nh·∫≠t n·∫øu kh√°c
      const needUpdate =
        actualMemberIds.length !== currentMemberIds.length ||
        actualMemberIds.some((id) => !currentMemberIds.includes(id));

      if (needUpdate) {
        await Household.findByIdAndUpdate(household._id, {
          members: actualMembers.map((m) => m._id),
        });
        console.log(
          `üîÑ ƒê·ªìng b·ªô household ${household.code}: ${currentMemberIds.length} ‚Üí ${actualMemberIds.length} members`
        );
        syncedHouseholds++;
      }
    }

    if (syncedHouseholds > 0) {
      console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${syncedHouseholds} households\n`);
    } else {
      console.log(`‚úÖ T·∫•t c·∫£ households ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô\n`);
    }

    // 4. Th·ªëng k√™
    console.log("üìä TH·ªêNG K√ä:");
    const totalCitizens = await Citizen.countDocuments();
    const totalHouseholds = await Household.countDocuments();
    const citizensWithHousehold = await Citizen.countDocuments({
      household: { $exists: true, $ne: null },
    });
    const citizensWithoutHousehold = totalCitizens - citizensWithHousehold;

    console.log(`   üë• T·ªïng s·ªë nh√¢n kh·∫©u: ${totalCitizens}`);
    console.log(`   üè† T·ªïng s·ªë h·ªô kh·∫©u: ${totalHouseholds}`);
    console.log(`   ‚úÖ Nh√¢n kh·∫©u c√≥ h·ªô kh·∫©u: ${citizensWithHousehold}`);
    console.log(
      `   ‚ö†Ô∏è  Nh√¢n kh·∫©u ch∆∞a c√≥ h·ªô kh·∫©u: ${citizensWithoutHousehold}`
    );

    console.log("\n‚úÖ Ho√†n th√†nh d·ªçn d·∫πp!");
  } catch (error) {
    console.error("‚ùå L·ªói khi d·ªçn d·∫πp:", error);
  } finally {
    await mongoose.connection.close();
    console.log("\nüëã ƒê√≥ng k·∫øt n·ªëi database");
  }
}

// K·∫øt n·ªëi database v√† ch·∫°y script
mongoose
  .connect(config.mongoURI)
  .then(() => {
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng\n");
    return cleanupOrphanData();
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
    process.exit(1);
  });
