/**
 * Script ƒë·ªÉ t·ª± ƒë·ªông t·∫°o m√£ nh√¢n kh·∫©u cho c√°c citizen ch∆∞a c√≥ code
 * Ch·∫°y script n√†y ƒë·ªÉ fix d·ªØ li·ªáu c≈©
 */

const mongoose = require("mongoose");
const config = require("../configs");
const { Citizen } = require("../models");

async function generateCitizenCodes() {
  try {
    console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o m√£ nh√¢n kh·∫©u...");

    // L·∫•y t·∫•t c·∫£ citizens ch∆∞a c√≥ code
    const citizensWithoutCode = await Citizen.find({
      $or: [{ code: { $exists: false } }, { code: null }, { code: "" }],
    }).sort({ createdAt: 1 }); // Sort theo th·ªùi gian t·∫°o, c≈© nh·∫•t ƒë·∫ßu ti√™n

    console.log(
      `üìä T√¨m th·∫•y ${citizensWithoutCode.length} nh√¢n kh·∫©u ch∆∞a c√≥ m√£`
    );

    if (citizensWithoutCode.length === 0) {
      console.log("‚úÖ T·∫•t c·∫£ nh√¢n kh·∫©u ƒë√£ c√≥ m√£!");
      return;
    }

    // T√¨m m√£ l·ªõn nh·∫•t hi·ªán c√≥
    const citizensWithCode = await Citizen.find({
      code: /^NK\d+$/,
    }).select("code");

    let startNumber = 1;
    if (citizensWithCode.length > 0) {
      const numbers = citizensWithCode.map((c) =>
        parseInt(c.code.replace("NK", ""), 10)
      );
      startNumber = Math.max(...numbers) + 1;
      console.log(`üìç B·∫Øt ƒë·∫ßu t·ª´ m√£: NK${startNumber}`);
    }

    // Generate code cho t·ª´ng citizen
    let currentNumber = startNumber;
    for (const citizen of citizensWithoutCode) {
      const newCode = `NK${currentNumber}`;
      await Citizen.findByIdAndUpdate(citizen._id, { code: newCode });
      console.log(
        `‚úÖ ${newCode}: ${citizen.fullName} (ID: ${citizen._id
          .toString()
          .substring(0, 8)}...)`
      );
      currentNumber++;
    }

    console.log(
      `\n‚úÖ Ho√†n th√†nh! ƒê√£ t·∫°o ${citizensWithoutCode.length} m√£ nh√¢n kh·∫©u`
    );
    console.log(`üìù M√£ cu·ªëi c√πng: NK${currentNumber - 1}`);
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o m√£:", error);
  } finally {
    await mongoose.connection.close();
    console.log("\nüëã ƒê√≥ng k·∫øt n·ªëi database");
  }
}

// K·∫øt n·ªëi database v√† ch·∫°y script
mongoose
  .connect(config.mongoURI)
  .then(() => {
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng");
    return generateCitizenCodes();
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
    process.exit(1);
  });
