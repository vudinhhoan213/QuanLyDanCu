/**
 * Script ƒë·ªÉ t·ª± ƒë·ªông copy s·ªë ƒëi·ªán tho·∫°i t·ª´ ch·ªß h·ªô sang household
 * Ch·∫°y script n√†y ƒë·ªÉ fix d·ªØ li·ªáu c≈©
 */

const mongoose = require("mongoose");
const config = require("../configs");
const { Household, Citizen } = require("../models");

async function copyPhoneFromHead() {
  try {
    console.log("üîÑ B·∫Øt ƒë·∫ßu copy s·ªë ƒëi·ªán tho·∫°i t·ª´ ch·ªß h·ªô...");

    // L·∫•y t·∫•t c·∫£ households kh√¥ng c√≥ phone ho·∫∑c phone r·ªóng
    const households = await Household.find({
      $or: [{ phone: { $exists: false } }, { phone: null }, { phone: "" }],
    }).populate("head");

    console.log(
      `üìä T√¨m th·∫•y ${households.length} h·ªô kh·∫©u ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i`
    );

    let updated = 0;
    let skipped = 0;

    for (const household of households) {
      if (household.head && household.head.phone) {
        // Copy phone t·ª´ ch·ªß h·ªô
        await Household.findByIdAndUpdate(household._id, {
          phone: household.head.phone,
        });

        console.log(
          `‚úÖ ${household.code}: ƒê√£ copy phone ${household.head.phone} t·ª´ ch·ªß h·ªô ${household.head.fullName}`
        );
        updated++;
      } else {
        console.log(
          `‚ö†Ô∏è ${household.code}: Ch·ªß h·ªô kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i, b·ªè qua`
        );
        skipped++;
      }
    }

    console.log(`\nüìä T·ªïng k·∫øt:`);
    console.log(`   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t: ${updated} h·ªô kh·∫©u`);
    console.log(`   ‚ö†Ô∏è B·ªè qua: ${skipped} h·ªô kh·∫©u`);
  } catch (error) {
    console.error("‚ùå L·ªói khi copy phone:", error);
  } finally {
    await mongoose.connection.close();
    console.log("\nüëã ƒê√≥ng k·∫øt n·ªëi database");
  }
}

// K·∫øt n·ªëi database v√† ch·∫°y script
mongoose
  .connect(config.mongoURI)
  .then(() => {
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng");
    return copyPhoneFromHead();
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
    process.exit(1);
  });
